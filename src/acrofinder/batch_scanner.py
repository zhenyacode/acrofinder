from .scanner import Scanner
from pathlib import Path
import pandas as pd
from typing import List, Optional
from datetime import datetime


from tqdm import tqdm


class BatchScanner:
    """
    –û—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É Scanner –ø–æ –≤—Å–µ–π –∑–∞–¥–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    """

    def __init__(self, scanner: Scanner, 
                 directory_path: Optional[Path] = None,
                 output_dir: Optional[Path] = None) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç BatchScanner.

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            scanner (Scanner): —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∫–∞–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ä–æ—Å—Ç–∏—Ö–æ–≤.
            directory_path (Path, optional): –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ç–µ–∫—Å—Ç–∞–º–∏ (.txt). 
                –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: <project_root>/data/texts.
            output_dir (Path, optional): –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. 
                –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: <project_root>/results. –°–æ–∑–¥–∞—ë—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        """
        self.scanner = scanner

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ–¥–Ω–∏–º–∞–µ–º—Å—è –æ—Ç src/acrofinder/ –Ω–∞ 2 —É—Ä–æ–≤–Ω—è)
        project_root = Path(__file__).parent.parent.parent

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ç–µ–∫—Å—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if directory_path is None:
            directory_path = project_root / "data" / "texts"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ç–µ–∫—Å—Ç–∞–º–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not directory_path.exists() or not directory_path.is_dir():
            raise FileNotFoundError(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {directory_path}")

        self.directory = directory_path

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if output_dir is None:
            output_dir = project_root / "results"

        # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        output_dir.mkdir(parents=True, exist_ok=True)
        self.output_dir = output_dir

        self.scanner = scanner
        self.directory = directory_path



    def scan_directory(self, levels: List[str] = ['word'], 
                       filter_by_neighbours: bool = False, 
                       min_neighbour_len: int = 1, 
                       save_results: bool = True) -> pd.DataFrame:
        """
        –°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ .txt —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π DataFrame —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏.
        """

        results = [] 
        total_chars = 0

        files = list(self.directory.glob("*.txt"))

        for file_path in tqdm(files, desc="Processing files"):
            try:
                text = file_path.read_text(encoding='utf-8')
            except:
                text = file_path.read_text(encoding='windows-1251')
            df = self.scanner.scan_text(text, levels, filter_by_neighbours, min_neighbour_len)
            df['source_file'] = file_path.name 
            results.append(df)

            total_chars += len(text)

        if save_results:
            scan_time = datetime.now()
            timestamp = int(scan_time.timestamp())
            csv_filename = f"{scan_time.strftime('%y%m%d')}_{timestamp}_results.csv"
            txt_filename = f"{scan_time.strftime('%y%m%d')}_{timestamp}_meta.txt"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV
            csv_path = self.output_dir / csv_filename
            df.to_csv(csv_path, index=False, encoding='utf-8-sig')
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {csv_path.name}")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º TXT-–æ—Ç—á—ë—Ç
            scan_params = {
                "levels": levels,
                "filter_by_neighbours": filter_by_neighbours,
                "min_neighbour_len": min_neighbour_len,
            }
            report = self._generate_scan_report(
                scan_time=scan_time,
                files_processed=len(files),
                total_chars=total_chars,
                total_candidates=len(df),
                scan_params=scan_params
            )
            txt_path = self.output_dir / txt_filename
            txt_path.write_text(report, encoding='utf-8')
            print(f"üìÑ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {txt_path.name}")


        return pd.concat(results, ignore_index=True) if results else pd.DataFrame()




    def _generate_scan_report(self,
                              scan_time: datetime,
                              files_processed: int,
                              total_chars: int,
                              total_candidates: int,
                              scan_params: dict) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –£–ü–†–û–©–Å–ù–ù–´–ô —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.
        """
        lines = []
        lines.append("üìä –ö–†–ê–¢–ö–ò–ô –û–¢–ß–Å–¢ –û –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ò")
        lines.append("=" * 50)
        lines.append(f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:     {scan_time.strftime('%Y-%m-%d %H:%M:%S')}")
        lines.append(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:       {self.directory.resolve()}")
        lines.append("")
        lines.append("‚öôÔ∏è  –ü–ê–†–ê–ú–ï–¢–†–´:")
        for key, value in scan_params.items():
            lines.append(f"   ‚Ä¢ {key:<20} {value}")
        lines.append("")
        lines.append(f"üìÅ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {files_processed}")
        lines.append(f"üìù –°–∏–º–≤–æ–ª–æ–≤ –≤—Å–µ–≥–æ:    {total_chars:,}".replace(",", " "))
        lines.append(f"üéØ –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {total_candidates}")
        lines.append("")
        lines.append("‚úÖ –ì–æ—Ç–æ–≤–æ.")

        return "\n".join(lines)