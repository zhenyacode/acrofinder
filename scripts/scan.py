# scripts/scan.py

import argparse
from pathlib import Path
import pandas as pd

# –ü–æ–¥–Ω–∏–º–∞–µ–º –ø—É—Ç—å, —á—Ç–æ–±—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Scanner –∏–∑ src
import sys
sys.path.append(str(Path(__file__).parent.parent / "src"))

from acrofinder.scanner import Scanner
from acrofinder.batch_scanner import BatchScanner

def main():
    parser = argparse.ArgumentParser(
        description="–ü–æ–∏—Å–∫ –∞–∫—Ä–æ—Å—Ç–∏—Ö–æ–≤ –≤ —Ç–µ–∫—Å—Ç–∞—Ö –ø–æ –ø–µ—Ä–≤—ã–º –±—É–∫–≤–∞–º —Å–ª–æ–≤, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–ª–∏ –∞–±–∑–∞—Ü–µ–≤."
    )
    
    parser.add_argument(
        "--input", "-i",
        type=Path,
        required=True,
        help="–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å .txt —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
    )
    
    parser.add_argument(
        "--dict", "-d",
        type=str,
        default="ru_curated.txt",
        help="–ò–º—è —Ñ–∞–π–ª–∞ —Å–ª–æ–≤–∞—Ä—è –≤ data/dicts/ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ru_curated.txt)"
    )
    
    parser.add_argument(
        "--levels", "-l",
        type=str,
        nargs="+",
        choices=["word", "sentence", "paragraph"],
        default=["word"],
        help="–£—Ä–æ–≤–Ω–∏ –ø–æ–∏—Å–∫–∞: word, sentence, paragraph (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)"
    )
    
    parser.add_argument(
        "--minlen", "-m",
        type=int,
        nargs="+",
        default=[5],
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ n-–≥—Ä–∞–º–º—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: -m 3 4 5)"
    )
    
    parser.add_argument(
        "--output", "-o",
        type=Path,
        default="results.csv",
        help="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: results.csv)"
    )

    args = parser.parse_args()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not args.input.exists():
        print(f"–û—à–∏–±–∫–∞: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {args.input} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        exit(1)

    # –°–æ–∑–¥–∞—ë–º —Å–∫–∞–Ω–µ—Ä
    scanner = Scanner(min_word_sizes=args.minlen, dictionary_name=args.dict)
    batch_scanner = BatchScanner(scanner, args.input)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∞–∫—Ä–æ—Å—Ç–∏—Ö–æ–≤...")
    results_df = batch_scanner.scan_directory(levels=args.levels)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results_df.to_csv(args.output, index=False, encoding='utf-8')
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {args.output}")
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(results_df)}")

    if len(results_df) == 0:
        print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –∫–æ—Ä–ø—É—Å.")

if __name__ == "__main__":
    main()