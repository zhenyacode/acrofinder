# scripts/scan.py

import argparse
from pathlib import Path
import pandas as pd

# –ü–æ–¥–Ω–∏–º–∞–µ–º –ø—É—Ç—å, —á—Ç–æ–±—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Scanner –∏–∑ src
import sys
sys.path.append(str(Path(__file__).parent.parent / "src"))

from acrofinder.scanner import Scanner
from acrofinder.batch_scanner import BatchScanner

def main():
    parser = argparse.ArgumentParser(
        description="–ü–æ–∏—Å–∫ –∞–∫—Ä–æ—Å—Ç–∏—Ö–æ–≤ –≤ —Ç–µ–∫—Å—Ç–∞—Ö –ø–æ –ø–µ—Ä–≤—ã–º –±—É–∫–≤–∞–º —Å–ª–æ–≤, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–ª–∏ –∞–±–∑–∞—Ü–µ–≤.",
        add_help=False
    )
    
    parser.add_argument(
        "--input", "-i",
        type=Path,
        required=True,
        help="–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å .txt —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
    )

    parser.add_argument(
        "--dict", "-d",
        type=str,
        default="wordforms_20k.txt",
        help="–ò–º—è —Ñ–∞–π–ª–∞ —Å–ª–æ–≤–∞—Ä—è –≤ data/dicts/ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: wordforms_20k.txt)"
    )
    
    parser.add_argument(
        "--levels", "-l",
        type=str,
        nargs="+",
        metavar="LEVEL",
        default=["sentence"],
        help="""
        –£—Ä–æ–≤–Ω–∏ –ø–æ–∏—Å–∫–∞: word (–∞–∫—Ä–æ—Å—Ç–∏—Ö, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–≤—ã–º–∏ –±—É–∫–≤–∞–º–∏ –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞),
        sentence (–∞–∫—Ä–æ—Å—Ç–∏—Ö, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–≤—ã–º–∏ –±—É–∫–≤–∞–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π), 
        paragraph (–∞–∫—Ä–æ—Å—Ç–∏—Ö, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–≤—ã–º–∏ –±—É–∫–≤–∞–º–∏ –∞–±–∑–∞—Ü–µ–≤ -- —Ç–∞–∫–∂–µ –ø–æ–¥—Ö–æ–¥–∏—Ç 
        –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å—Ç—Ä–æ—á–∫–∞–º —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è)
        """
    )

    parser.add_argument(
        "--vicinity", "-v",
        type=int,
        default=5,
        help="""
        –†–∞–∑–º–µ—Ä –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–µ–π: —Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞ –æ—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–æ—á–µ—Ç–∞–Ω–∏—è
            –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ø–æ–ª–µ vicinity (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
        """
    )

    parser.add_argument(
        "--custom_dict", "-c",
        type=str,
        default=None,
        help="""
        –ó–∞–¥–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–∏ –∞–∫—Ä–æ—Å—Ç–∏—Ö–æ–≤
        """
    )

    parser.add_argument(
        "--minlen", "-m",
        type=int,
        default=5,
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ—á–µ—Ç–∞–Ω–∏—è, –æ–±—Ä–∞–∑—É—é—â–µ–≥–æ –∞–∫—Ä–æ—Å—Ç–∏—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 —Å–∏–º–≤–æ–ª–æ–≤)"
    )

    parser.add_argument(
        '-h', '--help',
        action='help',
        default=argparse.SUPPRESS,
        help='–ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É –∏ –≤—ã–π—Ç–∏'
    )

    args = parser.parse_args()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not args.input.exists():
        print(f"–û—à–∏–±–∫–∞: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {args.input} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        exit(1)

    # –°–æ–∑–¥–∞—ë–º —Å–∫–∞–Ω–µ—Ä
    scanner = Scanner(min_word_size=args.minlen,
                      vicinity_range=args.vicinity,
                      dictionary_name=args.dict,
                      custom_dict_search=args.custom_dict)
    batch_scanner = BatchScanner(scanner, args.input)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    # print("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∞–∫—Ä–æ—Å—Ç–∏—Ö–æ–≤...")
    batch_scanner.scan_directory(levels=args.levels)

    # # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    # results_df.to_csv(args.output, index=False, encoding='utf-8')
    # print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {args.output}")
    # print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(results_df)}")

if __name__ == "__main__":
    main()